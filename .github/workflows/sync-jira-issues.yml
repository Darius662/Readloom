name: Sync GitHub Issues with Jira

on:
  issues:
    types: [opened, edited, closed, reopened, labeled, unlabeled]
  issue_comment:
    types: [created, edited, deleted]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Specific GitHub issue number to sync (leave empty for all)'
        required: false
        type: string

jobs:
  sync-to-jira:
    runs-on: ubuntu-latest
    steps:
      - name: Sync to Jira using REST APIs
        uses: actions/github-script@v7
        with:
          script: |
            const { issue } = context.payload;
            
            // Handle manual trigger
            if (context.eventName === 'workflow_dispatch') {
              const issueNumber = '${{ github.event.inputs.issue_number }}';
              
              if (issueNumber) {
                // Fetch the specific issue
                const { data: specificIssue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                await syncIssueToJira(specificIssue);
              } else {
                // Fetch all open issues and sync them
                const issues = await github.paginate(github.rest.issues.listForRepo, {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'all'
                });
                
                for (const iss of issues) {
                  // Skip pull requests
                  if (!iss.pull_request) {
                    await syncIssueToJira(iss);
                  }
                }
              }
            } else {
              // Handle automatic trigger from issue events
              if (issue && !issue.pull_request) {
                await syncIssueToJira(issue);
              }
            }

            async function syncIssueToJira(issue) {
              console.log(`Syncing issue #${issue.number} to Jira: ${issue.title}`);
              
              // Jira API configuration
              const jiraConfig = {
                host: '${{ secrets.JIRA_HOST }}',
                email: '${{ secrets.JIRA_USER_EMAIL }}',
                apiToken: '${{ secrets.JIRA_API_TOKEN }}',
                projectKey: 'HD'
              };

              try {
                // Basic Jira API call to create issue
                const jiraResponse = await fetch(`https://${jiraConfig.host}/rest/api/2/issue`, {
                  method: 'POST',
                  headers: {
                    'Authorization': 'Basic ' + Buffer.from(jiraConfig.email + ':' + jiraConfig.apiToken).toString('base64'),
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                    fields: {
                      project: {
                        key: jiraConfig.projectKey
                      },
                      summary: `[GitHub] ${issue.title}`,
                      description: `${issue.body || 'No description provided'}\n\n---\n**GitHub Issue:** ${issue.html_url}`,
                      issuetype: {
                        name: "Task"
                      }
                    }
                  })
                });

                if (jiraResponse.ok) {
                  const jiraIssue = await jiraResponse.json();
                  console.log(`‚úÖ Created Jira issue: ${jiraIssue.key}`);
                  
                  // Add comment with GitHub link back to GitHub issue
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    body: `üîó Synced to Jira: https://${jiraConfig.host}/browse/${jiraIssue.key}`
                  });
                  
                  return jiraIssue;
                } else {
                  const errorText = await jiraResponse.text();
                  console.error('‚ùå Jira API error:', jiraResponse.status, errorText);
                  
                  // Add error comment to GitHub issue
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    body: `‚ùå Failed to sync to Jira: ${jiraResponse.status} - ${errorText}`
                  });
                }
              } catch (error) {
                console.error('‚ùå Unexpected error:', error);
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `‚ùå Error syncing to Jira: ${error.message}`
                });
              }
            }
